Bare metal / embedded development requires you to write code which will communicate
with the hardware and often write into registers directly. Mastering bit
manipulation is very important to strive in this discipline.
There are two major ways to write into registers: bitwise operators and bit fields

bit fields: abstract the bit wise operation in the code, handy to access and modify
bits
struct
{
 unsigned char cl0:3;
 unsigned char cl1:1;
} reg_struct;
struct reg_struct mreg;
mreg.cl1 = 0;


Union
TutorialsPoint.com explains that
A union is a special data type available in C that allows to store different
data types in the same memory location. You can define a union with many members,
but only one member can contain a value at any given time. Unions provide an
efficient way of using the same memory location for multiple-purpose.




asm() vs asm volatile()

You can prevent an asm instruction from being deleted by writing the keyword volatile after the asm.
[...] The volatile keyword indicates that the instruction has important side-effects.
GCC will not delete a volatile asm if it is reachable.
volatile also prevents the compiler from deleting the expression if it decides
that the output values are unused
